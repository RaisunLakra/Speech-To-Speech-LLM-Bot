# Licensed under the Apache License, Version 2.0 (the "License");
# Name : Raisun Lakra
# Description : Speech-To-Speech-LLM-Bot
# Date : 09/01/2025 - 5:00 AM
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
from groq import Groq
from dotenv import load_dotenv
import time
# import pyttsx3
import speech_recognition as sr
import wikipedia
import webbrowser

from gtts import gTTS
import os

load_dotenv()

groq_client = Groq(api_key=os.getenv("GROQ_API_KEY"))

r = sr.Recognizer()

SYSTEM_MSG = """You are a senior software developer and AI expert. You will be given question and solution regarding high level approach to create a chatbot or any other sofware. You have to read the user's query and solution. First you will judge the solution find the mistake the correct the whole process. It may possible that user only ask a query and don't give any solution. In that case you have to give the solution. The solution generated by you should not looks like create by bot or any ai. It should look like written by the user. So try to understand the tone of user and generate the solution. You are free to genearte any no of line and words. You can also use emoji. I am giving you your name Hippo as you are using 70B parameters model 'llama-3.3-70b-versatile'."""

# Function to communicate with Groq API
def function_call(prompt, history):

    # TODO: Implement RAG to extract knowledge from machine learning books and software development books.
    # TODO: Extract data from github history, portfolio and resume. Use pinecode to store data.
    # TODO: Provide a way to open web pages and download files from the internet.

    function_convo = history + \
        [
            {'role': 'system', 'content': SYSTEM_MSG},
            {'role': 'user', 'content': prompt}
        ]
    
    chat_completion = groq_client.chat.completions.create(messages=function_convo, model='llama-3.3-70b-versatile')
    response = chat_completion.choices[0].message

    return response.content

def continuous_conversation():
    print("Hippo: Hi! How can I help you today? (Type 'exit' to end the conversation)")
    history = []
    
    while True:
        user_input = listen()
        
        if user_input.lower() in ['exit', 'stop']:
            print("Hippo: Goodbye! Have a great day!")
            break
        
        response = function_call(user_input, history)
        response_time = len(response)/100
        print("ðŸ’¬...")
        time.sleep(response_time)
        print(f"Hippo: {response}\n\n")
        speak(response)

        history.append({'role': 'user', 'content': user_input})
        history.append({'role': 'assistant', 'content': response})

def speak(text: str):

    tts = gTTS(text=text, lang='en')
    tts.save("test.mp3")

    os.system("mpg321 test.mp3")  # Install mpg321 if needed: sudo apt install mpg321

def listen():
    r.energy_threshold = 500
    r.pause_threshold = 1

    with sr.Microphone() as source:
        print("Listening...")
        audio = r.listen(source)

    try:
        text = r.recognize_google(audio)
        user_input = f"User: {text}"
        print(user_input)
        return text
    except sr.UnknownValueError:
        text = "Could not understand audio. Try to say again..."
        print(text)
        speak(text)
        return ""
    except sr.RequestError as e:
        text = "Could not request results from Google Speech Recognition service; {0}".format(e)
        print(text)
        speak("Catch error. See console for more details")
        return "exit"

if __name__=='__main__':

    continuous_conversation()
